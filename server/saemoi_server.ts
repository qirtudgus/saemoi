import cookieParser from 'cookie-parser';
import cors from 'cors';
import express from 'express';
import http from 'http';
import moment from 'moment';
import schedule from 'node-schedule';
import { Server } from 'socket.io';
import { jwtCheck } from './middleware/CheckToken.js';
import { boardRouter } from './router/board.js';
import { commentRouter } from './router/comment.js';
import { loginRouter } from './router/login.js';
import { raidBoardRouter } from './router/raidBoard.js';
import { registerRouter } from './router/register.js';
import { db } from './saemoi_db.js';

const SERVER_PORT = 3002;
const app = express();
//https://www.zerocho.com/category/NodeJS/post/5e9bf5b18dcb9c001f36b275
app.use(
  cors({
    origin: true, // Ï∂úÏ≤ò ÌóàÏö© ÏòµÏÖò
    credentials: true, // ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌïú Î¶¨ÏÜåÏä§(Ïø†ÌÇ§ ..Îì±) Ï†ëÍ∑º
  }),
);
app.use(express.json());
app.use(cookieParser());

const server = http.createServer(app);
const io = new Server(server, {
  pingInterval: 30000,
  pingTimeout: 20000,
  cors: {
    origin: '*',
    credentials: true,
  },
});

var userCount = 0;
var raidCount = 0;
let deleteSeconds = 180;
var userList: any = [];
var raidList: {
  monsterName: string;
  raidDifficulty: string;
  raidCode: string;
  type: string;
  date: string;
  deleteDate: string;
  raidText: string;
  raidOption: string;
}[] = [];

io.on('connection', (socket) => {
  const socketId = socket.id;
  userCount++;

  socket.emit('newPost', false);
  // socket.on('newPost', () => {
  //   io.emit('newPost', true);
  // });
  socket.on('newPost', (payload) => {
    io.emit('newPost', true);
  });

  socket.on('soundTest', (payload) => {
    socket.emit('soundTest', 'test');
  });
  io.emit('userCount', userCount);
  io.emit('raidCount', raidCount);

  console.log('a user connected');
  socket.emit('raidList', raidList);
  socket.on('RefreshraidList', () => {
    console.log('ÏÉàÎ°úÍ≥†Ïπ® ÏöîÏ≤≠');
    io.emit('raidList', raidList);
  });
  socket.on('raidList', (payload) => {
    console.log('Ïã†Í∑ú Î†àÏù¥Îìú Îì±Î°ù!');
    raidCount++;
    //Í∞íÏù¥ Îì§Ïñ¥Ïò§Î©¥ ÏÜåÎ¶¨Î•º ÎÇ¥Í∏∞ÏúÑÌï¥ newPostÏóê Î©îÏãúÏßÄÎ•º ÏèúÎã§
    socket.broadcast.emit('newPost', true);
    //ÌéòÏù¥Î°úÎìúÏóî Îì±Î°ùÌïú Î†àÏù¥Îìú Í∞ùÏ≤¥Í∞Ä Îì§Ïñ¥ÏûàÏùå
    raidList.unshift(payload);
    //Îì±Î°ùÏãúÍ∞ÑÏù¥ 3Î∂Ñ(180Ï¥à)ÏßÄÎÇúÍ≤ÉÏùÑ Ï†úÏô∏ÏãúÌÇ¥.
    // 1 - ÏÇ≠Ï†úÏãúÍ∞ÑÏùÑ Îì±Î°ùÌïòÏó¨ Î°úÏßÅÏùÑ Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÎã§ (ÏÇ≠Ï†úÏãúÍ∞ÑÏù¥ ÎÑòÏñ¥Í∞ÑÍ≤É)
    // let three = raidList.filter((i, index) => {
    //   if (moment().diff(i.date, 'seconds') < deleteSeconds) return i;
    // });
    // raidList = [...three];
    io.emit('raidList', raidList);
    io.emit('raidCount', raidCount);

    //dbÏóê Ï†ÄÏû•ÏãúÏºúÏ£ºÏûê..
    let {
      nickname,
      raidCode,
      monsterName,
      type,
      positionState = '',
      difficultyState,
      optionList,
      etcText,
      date,
    } = payload;
    let insertQuery =
      'INSERT INTO raidboard (nickname,raidCode,monsterName,type,raidPosition, raidDifficulty, raidOption,raidText,date) VALUES (?,?,?,?,?,?,?,?,?)';
    db.query(
      insertQuery,
      [nickname, raidCode, monsterName, type, positionState, difficultyState, optionList, etcText, date],
      (err, rows) => {
        console.log('Í≤åÏãúÎ¨º Îì±Î°ù ÏôÑÎ£å');
        console.log(err);
      },
    );
  });

  //ÏÇ¨Ïö©Ïûê Ïó∞Í≤∞Ïù¥ ÎÅäÍ≤ºÏùÑ Îïå..
  socket.on('disconnect', function (reason) {
    console.log('ÏÜåÏºì ÎÅäÍ∏¥ Ïù¥Ïú†');
    console.log(reason);
    userCount--;
    console.log('undecreas!', userCount);
    io.emit('userCount', userCount);
  });
});

// 10Ï¥àÎßàÎã§ ÌïúÎ≤àÏî© Î†àÏù¥Îìú Ï†ïÎ¶¨
setInterval(() => {
  //Î≥¥ÎÇ¥Ï§Ñ Î†àÏù¥ÎìúÍ∞Ä ÏóÜÏùÑÎïåÎäî stop
  if (raidList.length === 0) {
    console.log('Îì±Î°ùÎêú Î¶¨Ïä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.');
    return;
  } else {
    //Îç∞ÎìúÎùºÏù∏ÏùÑ ÎÑòÍ∏¥Í≤å ÏûàÎäîÏßÄ ÌôïÏù∏Ìïú Îí§ ÏóÜÎã§Î©¥ return
    let check = raidList.findIndex((i) => {
      console.log(moment().diff(i.date, 'seconds'));
      return moment().diff(i.date, 'seconds') > deleteSeconds;
    });
    if (check === -1) {
      console.log('ÏÇ≠Ï†úÌï† Î∞∞Ïó¥Ïù¥ ÏóÜÏäµÎãàÎã§.');
      return;
    } else {
      let three = raidList.filter((i, index) => {
        if (moment().diff(i.date, 'seconds') < deleteSeconds) return i;
      });
      // TimeOutDel(raidList)
      raidList = [...three];
      io.emit('raidList', raidList);
    }
  }
}, 10000);

//5Ï¥àÎßàÎã§ ÌïúÎ≤àÏî© Ï¢ÖÎ£åÎêúÎ†àÏù¥Îìú Íµ¨Î∂ÑÏùÑ ÏúÑÌï¥ Î≥¥ÎÇ¥Ï£ºÏóàÏßÄÎßå Ïì∞ÏßÄÎßêÏûê.
// setInterval(() => {
//   if (raidList.length === 0) return;
//   io.emit('raidList', raidList);
// }, 5000);

db.connect((err: any) => {
  if (err) console.log('MySQL Ïó∞Í≤∞ Ïã§Ìå® : ', err);
  console.log('MySQL Connected!!!');
});

//mysql connection ÎÅäÍπÄ Î∞©ÏßÄÎ•º ÏúÑÌï¥ 1ÏãúÍ∞ÑÎßàÎã§ ÏøºÎ¶¨Î•º ÎÇ†Î¶∞Îã§.
setInterval(() => {
  db.query('SELECT 1', [], (err, rows, fields) => {
    console.log('Ïª§ÎÑ•ÏÖò ÎÅäÍπÄÎ∞©ÏßÄ ÏøºÎ¶¨');
  });
}, 3600000);

//express req ÏÜçÏÑ± Ï∂îÍ∞Ä
declare module 'express-serve-static-core' {
  interface Request {
    decoded?: any;
  }
}

// app.use(jwtCheck);
//Ìï¥Îãπ Ï£ºÏÜåÏóê Îì§Ïñ¥Ïò§ÎäîÍ≤ÉÏóêÎßå ÎØ∏Îì§Ïõ®Ïñ¥Î•º Ï≤¥ÌÅ¨Ìï† Ïàò ÏûàÎã§.
app.use('/api/test', jwtCheck);
//ÌöåÏõêÍ∞ÄÏûÖ ÎùºÏö∞ÌÑ∞
app.use('/api/register', registerRouter);
//Î°úÍ∑∏Ïù∏ ÎùºÏö∞ÌÑ∞
app.use('/api/login', loginRouter);
//Í≤åÏãúÌåê ÎùºÏö∞ÌÑ∞
app.use('/api/board', boardRouter);
//Î†àÏù¥ÎìúÍ≤åÏãúÌåê ÎùºÏö∞ÌÑ∞
app.use('/api/raidboard', raidBoardRouter);
//ÎåìÍ∏Ä ÎùºÏö∞ÌÑ∞
app.use('/api/comment', commentRouter);

app.post('/api/test', (req, res) => {
  console.log(req.body);
  db.query('SELECT * FROM users', [], (err, result) => {
    res.status(200).json(result);
  });
});

app.post('/api/loginlist', (req, res) => {
  console.log(req.body);
  console.log(req);
  res.status(200).json('haha');
});

const Job = () => {
  console.log('Î†àÏù¥ÎìúÎ¶¨Ïä§Ìä∏ Ï†ïÎ¶¨');
  raidList = [];
  io.emit('raidList', raidList);
};

const job = schedule.scheduleJob('0 0 * * *', function () {
  console.log(new Date());
  console.log('ÎÖ∏Îìú Ïä§ÏºÄÏ•¥ Ìò∏Ï∂ú');
  Job();
});

//socketioÏôÄ http Ìè¨Ìä∏Î•º ÎèôÏùºÌïòÍ≤å ÏÇ¨Ïö©ÌïòÎäî Î≤ï
//https://doc.scalingo.com/languages/nodejs/websocket-web-same-port
server.listen(SERVER_PORT, () => {
  console.log(`
    üõ°Ô∏è  Server listening on port: ${SERVER_PORT}
  `);
});

// server.listen(3002, function () {
//   console.log('listening on port 4000');
// });
